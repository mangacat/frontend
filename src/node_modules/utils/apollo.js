import fetch from 'node-fetch'
import ApolloClient, { gql } from 'apollo-boost'
import { userSession } from 'stores.js'

export default new ApolloClient({
	uri: "https://api.manga.cat/v1/graphql",
	request: (operation) => {
		const token = userSession.token()
		console.log("uwu")
		console.log(token)
		console.log("uwu")
		if (token !== null) {
			operation.setContext({
				headers: {
					authorization: `Bearer ${token}`
				}
			})
		}

	},
	fetch,
})


export const  SERIES_CHAPTERS = gql`
query seriesChapters {
  series_chapters(limit: 25, order_by: {time_uploaded: desc}) {
    id
    title
    chapter_number_volume
    chapter_number_absolute
    time_uploaded
    views
    comments
    series_chapters_series {
      id
      name
    }
    groups_series_chapters {
      groups_scanlation_series_chapters_groups {
        name
        id
      }
    }
  }
}`

export const PRIVATE_SERIES_CHAPTERS = gql`
query SeriesChapters {
  series_chapters: users_following_series(order_by: {users_following_series_chapters: {time_uploaded: desc}}, limit: 25, where: {users_following_series_chapters: {published: {_eq: true}}}) {
    chapter: users_following_series_chapters {
      id
    title
      hash
      language
      chapter_number_volume
      chapter_number_absolute
      volume_number
      time_uploaded
    views
    comments
      series: series_chapters_series {
        id
        name
        cover_image
	  }
    groups_series_chapters {
      groups_scanlation_series_chapters_groups {
        name
        id
      }
    }
    }
  }
}

`

export const SERIES = gql`
	query($id: Int!) {
		series(where: {id: {_eq: $id}}, limit: 1) {
			view
			updated
			status
			raw
			rating
			name
			mu_id
			mangadex_id
			mal_id
			id
			hentai
			follows
			description
			cover_image
			country
			bw_id
			amazonjp_id
			series_chapters(limit: 25, order_by: {time_uploaded: desc}) {
				id
				title
				chapter_number_volume
				chapter_number_absolute
				time_uploaded
				views
				comments
				series_chapters_series {
					id
					name
				}
				groups_series_chapters {
					groups_scanlation_series_chapters_groups {
						name
						id
					}
				}
			}
			series_aliases {
				id
				name
			}
			people_series {
				people_series {
					id
					name
				}
				type
			}
			tags_series {
				tags_series {
					tag_name
					tag_namespace
				}
			}
			series_related {
				type
				series_related_related {
					id
					name
					cover_image
				}
			}
		}
	}
`

export const PEOPLE = gql`
	query($id: Int!) {
		people(where: {id: {_eq: $id}}, limit: 1) {
			about
			alternative_names
			description
			birthday
			family_name
			given_name
			id
			image
			mal_id
			name
			type
			updated
			url
			website
			people_series {
				type
				people_series_series {
					id
					name
					cover_image
				}
			}
		}
	}

`

export const USER = gql`
query($id: uuid!) {
  users(limit: 1, where: {id: {_eq: $id}}) {
    active
    avatar_url
	created_at
	default_role
    display_name
    id
    updated_at
    cover_image
  }
}
`



export const TAGS = gql`
 
`


export const SEARCH = gql`
	query($hentai: Boolean!, $name: String, $status: [String!] $limit: Int!, $offset: Int!, $tags_inc: [bigint!], $tags_exc: [bigint!], $country: [String!]) {
		series(where: {tags_series: {_and: {tags_id: {_in: $tags_inc, _nin: $tags_exc}}}, country: {_in: $country}, status: {_in: $status}, hentai: {_eq: $hentai}, name: {_ilike: $name}, series_aliases: {name: {_ilike: $name}}}, limit: $limit, offset: $offset) {
			id
			name
			cover: cover_image
			description
			tags_series {
				tags_series {
					name: tag_name
				}
			}
		}
	}

`
export const SIMPLE_SEARCH = gql`
	query($name: String, $limit: Int!, $offset: Int!) {
		series(where: {name: {_ilike: $name}, series_aliases: {name: {_ilike: $name}}}, limit: $limit, offset: $offset) {
			id
			name
			cover: cover_image
		}
	}
`
