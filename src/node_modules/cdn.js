const options = {
  strictMode: false,
  key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],
  q: {
    name: 'queryKey',
    parser: /(?:^|&)([^&=]*)=?([^&]*)/g
  },
  parser: {
    strict: /^(?:([^:/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\d*))?))?((((?:[^?#/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
    loose: /^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#/]*\.[^?#/.]+(?:[?#]|$)))*\/?)?([^?#/]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
}

const parse = str => {
  const o = options
  const m = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str)
  const uri = {}
  let i = 14

  while (i--) uri[o.key[i]] = m[i] || ''

  uri[o.q.name] = {}
  uri[o.key[12]].replace(o.q.parser, ($0, $1, $2) => {
    if ($1) uri[o.q.name][$1] = $2
  })

  return uri
}

const seededRandom = (seed, max, min) => {
  max = max || 1
  min = min || 0
  seed = (seed * 9301 + 49297) % 233280
  const rnd = seed / 233280
  return min + rnd * (max - min)
}

const hash = (host, min, max) => {
  let hash = 0
  for (let i = 0; i < host.length; i++) {
    hash = (hash << 5) - hash + host.charCodeAt(i)
    hash &= hash
  }
  return Math.floor(seededRandom(hash, min, max))
}

export const cdn = (url, payload = {}) => {
  // url = `https://img.manga.cat/file/urwaifuisashit/${url}`

  try {
    new URL(url)
  } catch (_) {
    url = `https://img.manga.cat/file/urwaifuisashit/${url}`
  }

  const ele = parse(url)

  if (ele.authority === '' || ele.path === '') return ''

  return `https://i${hash(ele.host, 0, 2)}.wp.com/${ele.authority + ele.path}?${
    ['strip=all']
      .concat(Object.keys(payload).map(k => `${encodeURIComponent(k)}=${encodeURIComponent(payload[k])}`))
      .join('&')
    }`
}
