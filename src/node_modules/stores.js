async function post(endpoint, data = {}, headers = { 'Content-Type': 'application/json' }) {
    const r = await fetch(endpoint, {
        method: 'POST',
        body: JSON.stringify(data),
        headers
    })
    return await r.json()
}

async function fetch_get(endpoint, headers) {
    const r = await fetch(endpoint, { method: 'GET', headers })
    return await r.json()
}

const session = () => {
    let store

    return {
        set(sessionStore) {
            store = sessionStore
        },

        async login(credentials) {
            const response = await post(`https://auth.manga.cat/auth/login`, credentials)
            console.log(response)
            const user = await fetch_get(`https://auth.manga.cat/auth/user`, {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${response.jwt_token}`
            })
            console.log(user)

            store.update(state => ({ ...state, user: { ...response, ...user.user } }))

            return { ...user.user, ...response }
        },

        async logout() {
            const response = await post(`auth/logout`)
            store.update(state => ({ ...state, user: null }))
            return response
        },

        async register(user) {
            try {

                const response = await post(`https://auth.manga.cat/auth/register`, user)
                return response
            } catch (error) {
                console.log(error)
                throw Error(error)
            }
        },

        async update() {
            value = get(store)

            const user = await fetch_get(`https://auth.manga.cat/auth/user`, {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${value.user.jwt_token}`
            })
            if (user.user) {
                store.update(state => ({ ...state, user: { ...user.user } }))
            }
            return { ...user.user }
        },
        token() {

            let value
            try {
                value = get(store)
            } catch {
                return null
            }
            if (value.user === undefined) {
                return null
            } else {
                return value.user.jwt_token
            }
        }
    }
}

export const userSession = session()

import { writable, get } from 'svelte/store'

export const nav_height = writable(0)
